---
interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'error' | 'ghost' | 'accent' | 'success';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  class?: string;
  [x: string]: any; // for Alpine attributes like @click
}

const { 
  variant = 'primary', 
  size = 'md', 
  href, 
  class: className,
  ...rest
} = Astro.props;

const baseClasses = 'font-medium rounded-lg text-sm focus:outline-none focus:ring-4 cursor-pointer';

const variantClasses = {
  primary: 'cursor-pointer bg-primary text-primary-content hover:bg-primary/90 focus:ring-primary/50',
  secondary: 'cursor-pointer text-white bg-purple-700 hover:bg-purple-800 focus:ring-purple-300',
  outline: 'cursor-pointer text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 focus:ring-gray-100',
  error: 'cursor-pointer text-white bg-red-700 hover:bg-red-800 focus:ring-red-300',
  ghost: 'cursor-pointer hover:bg-base-200',
  accent: 'cursor-pointer text-white bg-yellow-400 hover:bg-yellow-500 focus:ring-yellow-300',
  success: 'cursor-pointer text-white bg-green-700 hover:bg-green-800 focus:ring-green-300',
};

const sizeClasses = {
  sm: 'px-3 py-1.5 text-xs',
  md: 'px-5 py-2.5',
  lg: 'px-6 py-3 text-base',
};

const Tag = href ? 'a' : 'button';
---

<Tag
  class:list={[
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  ]}
  href={href}
  {...rest}
>
  <slot />
</Tag>
