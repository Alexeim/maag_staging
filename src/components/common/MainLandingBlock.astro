---
import { Image } from "astro:assets";
import maagLogo from "../../assets/logo/maaglogo.svg";
import picture2 from "../../assets/images/cal.jpeg";
import { articlesApi, eventsApi } from "@/lib/api/api";

const CATEGORY_LABELS: Record<string, string> = {
  culture: "Культура",
  paris: "Париж",
  news: "Новости",
  hotContent: "Самое Читаемое",
};

const normalizeCategory = (value?: string) => {
  if (!value) {
    return value;
  }
  const entry = Object.entries(CATEGORY_LABELS).find(
    ([, label]) => label === value,
  );
  return entry ? entry[0] : value;
};

const getCategoryLabel = (value?: string) => {
  const normalized = normalizeCategory(value);
  if (normalized && CATEGORY_LABELS[normalized]) {
    return CATEGORY_LABELS[normalized];
  }
  return value ?? "";
};

const getPrimaryTag = (article: any) => {
  const rawTags = Array.isArray(article?.tags)
    ? article.tags
    : typeof article?.tags === "string"
      ? [article.tags]
      : [];

  const firstTag = rawTags.find(
    (tag) => typeof tag === "string" && tag.trim().length > 0,
  );

  if (firstTag) {
    return firstTag.trim();
  }

  if (article?.isHotContent) {
    return CATEGORY_LABELS.hotContent;
  }

  return getCategoryLabel(article?.category);
};

const isNewsCategory = (value?: string) =>
  normalizeCategory(value) === "news";

const isHotContentArticle = (article: any) =>
  Boolean(article?.isHotContent) ||
  normalizeCategory(article?.category) === "hotContent";

let mainArticle: any = null;
let newsArticles: any[] = [];
let landingEvent: any = null;

try {
  const articles = await articlesApi.list();

  // Filter for the main article (latest that is NOT news)
  mainArticle =
    articles.find(
      (article) =>
        !isNewsCategory(article.category) &&
        !isHotContentArticle(article),
    ) || null;

  // Filter for news articles
  newsArticles = articles.filter((article) => isNewsCategory(article.category));
} catch (error) {
  console.error("Failed to fetch articles:", error);
}

const eventCategoryLabels: Record<string, string> = {
  exhibition: "Выставка",
  concert: "Концерт",
  performance: "Спектакль",
};

const toDate = (value: unknown): Date | null => {
  if (!value) {
    return null;
  }
  if (value instanceof Date) {
    return value;
  }
  if (typeof value === "string") {
    const parsed = new Date(value);
    return Number.isNaN(parsed.getTime()) ? null : parsed;
  }
  if (typeof value === "number") {
    const parsed = new Date(value);
    return Number.isNaN(parsed.getTime()) ? null : parsed;
  }
  if (typeof value === "object") {
    const maybeSeconds =
      (value as { seconds?: number; _seconds?: number }).seconds ??
      (value as { seconds?: number; _seconds?: number })._seconds;
    if (typeof maybeSeconds === "number") {
      return new Date(maybeSeconds * 1000);
    }
    if (typeof (value as { toDate?: () => Date }).toDate === "function") {
      const parsed = (value as { toDate: () => Date }).toDate();
      return parsed instanceof Date && !Number.isNaN(parsed.getTime()) ? parsed : null;
    }
  }
  return null;
};

const formatEventDate = (value: unknown) => {
  const date = toDate(value);
  if (!date) {
    return null;
  }
  return {
    day: date.getDate().toString().padStart(2, "0"),
    month: date.toLocaleDateString("ru-RU", { month: "long" }),
  };
};

const pickPinnedEvent = (events: any[]) => {
  const pinned = events.find((event) => Boolean(event?.isOnLanding));
  if (!pinned) {
    return null;
  }
  const startDate = toDate(pinned.startDate);
  if (!startDate) {
    return null;
  }
  const endDate = toDate(pinned.endDate);
  return {
    ...pinned,
    startDate,
    endDate,
  };
};

try {
  const events = await eventsApi.list();
  landingEvent = pickPinnedEvent(events);
} catch (error) {
  console.error("Failed to fetch events for landing:", error);
}
---

<section class="w-full lg:max-h-[790px] px-4 lg:px-8 bg-base-200 mb-0">
  <div class="flex flex-col lg:flex-row gap-6 lg:gap-4">
    {/* News Column - THINNER */}
    <aside class="w-full lg:w-3/12 px-0 lg:px-4 lg:border-r lg:border-gray-300 lg:max-h-[780px] lg:overflow-y-scroll">
      <h2
        class="text-lg font-normal mb-6 uppercase tracking-[0.3em] font-old-standard"
      >
        Новости
      </h2>
      <div
        class="flex space-x-6 overflow-x-auto pb-2 lg:flex-col lg:space-x-0 lg:space-y-6 lg:overflow-x-visible"
      >
        {
          newsArticles.map((newsItem) => (
            <div class="flex-shrink-0 sm:w-1/2 md:w-1/3 lg:w-full">
              <div class="flex items-start gap-4">
                <a href={`/article/${newsItem.id}`} class="block bg-base-200 z-50">
                  <Image
                    src={newsItem.imageUrl}
                    alt={`News image for ${newsItem.title}`}
                    class="w-20 h-20 object-cover flex-shrink-0"
                    width={80}
                    height={80}
                    transition:name={`main-article-image-${newsItem.id}`}
                  />
                </a>
                <div class="flex-1 max-w-40">
                    <a href={`/article/${newsItem.id}`} class="block bg-base-200 z-50">
                      <h3 class="text-base font-bold font-old-standard mt-1 leading-tight truncate">
                        {newsItem.title}
                      </h3>
                    </a>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </aside>


    {/* Main Column - WIDER */}
    <article class="w-full lg:w-6/12 lg:px-4 order-first lg:order-none relative">
      <h2
        class="text-lg font-normal mb-6 uppercase tracking-[0.3em] font-old-standard"
      >
        Главное
      </h2>
      {mainArticle ? (
        <div>
          <a href={`/article/${mainArticle.id}`} class="block bg-base-200 z-50">
            <img
              src={mainArticle.imageUrl}
              alt={mainArticle.title}
              class="w-full h-auto lg:h-[600px] object-cover relative lg:z-40"
              transition:name={`main-article-image-${mainArticle.id}`}
            />
          </a>
          <div class="p-4 lg:p-6">
            {mainArticle.category && (
              <p class="text-error uppercase mb-3 font-inter text-sm tracking-[.46em]">
                {getPrimaryTag(mainArticle)}
              </p>
            )}
            <a href={`/article/${mainArticle.id}`} class="block bg-base-200 z-50">
              <h2 class="max-w-[600px] text-3xl lg:text-5xl leading-tight font-thin font-old-standard truncate">
                {mainArticle.title} <Image
                  src={maagLogo}
                  alt="MAAG"
                  class="w-8 h-8 lg:w-10 lg:h-10 inline-block align-middle"
                />
              </h2>
            </a>
          </div>
        </div>
      ) : (
        <div>
          <div class="p-4 lg:p-6">
            <p>Главных статей для отображения нет.</p>
          </div>
        </div>
      )}
    </article>

    {/* Calendar Column */}
    <aside class="w-full lg:w-3/12 px-0 lg:px-4 lg:border-l lg:border-gray-300 mt-6 lg:mt-0">
      <h2
        class="text-lg font-normal mb-6 uppercase tracking-[0.3em] font-old-standard"
      >
        Календарь
      </h2>
      {landingEvent ? (
        <a href={`/events/${landingEvent.id}`} class="block bg-white rounded-xl shadow-lg overflow-hidden">
          <div class="p-4 lg:p-2 flex items-center gap-3">
            <div class="flex flex-col items-center gap-1 rounded-full bg-base-200 p-3">
              <p class="text-2xl lg:text-2xl text-black/60 font-thin font-old-standard">
                {formatEventDate(landingEvent.startDate)?.day || "--"}
              </p>
            </div>
            <p class="text-[12px] font-inter uppercase tracking-[0.15em]">
              {(formatEventDate(landingEvent.startDate)?.month || "").toUpperCase() || "Дата"}
            </p>
          </div>
          {landingEvent.imageUrl ? (
            <img
              src={landingEvent.imageUrl}
              alt={landingEvent.title}
              class="w-full h-auto lg:h-[240px] object-cover"
              loading="lazy"
            />
          ) : (
            <Image
              src={picture2}
              alt="Event"
              class="w-full h-auto lg:h-[240px] object-cover"
            />
          )}
          <div class="p-4 lg:p-6">
            <p class="text-error uppercase text-[10px] mb-3 font-inter tracking-[0.15em]">
              {eventCategoryLabels[landingEvent.category] || "Событие"}
            </p>
            <h2 class="text-base lg:text-lg leading-tight font-old-standard mb-4">
              {landingEvent.title}
            </h2>
            <div class="flex items-center gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-calendar"
              >
                <rect width="18" height="18" x="3" y="4" rx="2" ry="2"></rect>
                <line x1="16" x2="16" y1="2" y2="6"></line>
                <line x1="8" x2="8" y1="2" y2="6"></line>
                <line x1="3" x2="21" y1="10" y2="10"></line>
              </svg>
              <p class="text-sm text-gray-600">
                {landingEvent.endDate && landingEvent.endDate.getTime() !== landingEvent.startDate.getTime()
                  ? `${landingEvent.startDate.toLocaleDateString("ru-RU")} – ${landingEvent.endDate.toLocaleDateString("ru-RU")}`
                  : landingEvent.startDate.toLocaleDateString("ru-RU")}
              </p>
            </div>
          </div>
        </a>
      ) : (
        <div class="bg-white rounded-xl shadow-lg">
          <div class="p-4 lg:p-2 flex items-center gap-3">
            <div class="flex flex-col items-center gap-1 rounded-full bg-base-200 p-3">
              <p class="text-2xl lg:text-2xl text-black/50 font-thin font-old-standard">--</p>
            </div>
            <p class="text-[12px] font-inter uppercase tracking-[0.15em]">Скоро</p>
          </div>
          <Image
            src={picture2}
            alt="Event placeholder"
            class="w-full h-auto lg:h-[240px] object-cover"
          />
          <div class="p-4 lg:p-6">
            <p class="text-error uppercase text-[10px] mb-3 font-inter tracking-[0.15em]">
              Событие
            </p>
            <h2 class="text-base lg:text-lg leading-tight font-old-standard mb-4">
              Скоро появится событие
            </h2>
            <p class="text-sm text-gray-600">Следи за обновлениями</p>
          </div>
        </div>
      )}
    </aside>
  </div>
</section>
