---
import Layout from "../../Layouts/Layout.astro";
import ArticleHeader from "../../components/article/ArticleHeader.astro";
import ArticleAuthor from "../../components/article/ArticleAuthor.astro";
import SocialShare from "../../components/article/SocialShare.astro";
import ArticleImage from "../../components/article/ArticleImage.astro";
import ArticleBody from "../../components/article/ArticleBody.astro";
import RecentArticles from "../../components/article/RecentArticles.astro";
import EventDetails from "../../components/article/EventDetails.astro";
import type { ImageMetadata } from "astro";
import { newsItems } from "@/content/mockNews";
import { ApiError, articlesApi } from "@/lib/api/api";

const { id } = Astro.params;

const CATEGORY_LABELS: Record<string, string> = {
  culture: "Культура",
  paris: "Париж",
  news: "Новости",
  hotContent: "Самое Читаемое",
};

let articleData: any;
let error: string | null = null;

try {
  articleData = await articlesApi.getById(id);
} catch (e: any) {
  console.error(e);
  if (e instanceof ApiError) {
    error =
      e.status === 404
        ? "Article not found."
        : `Error fetching article: ${e.message}`;
  } else {
    error = `Error fetching article: ${e.message}`;
  }
}

// Normalize data for the template
const rawCategory =
  articleData?.category ?? articleData?.header?.category ?? null;

const displayArticle = {
  title: articleData?.header?.title || articleData?.title || 'Article',
  category: rawCategory
    ? CATEGORY_LABELS[rawCategory] || rawCategory
    : 'Category',
  authorName: articleData?.author ? `${articleData.author.firstName} ${articleData.author.lastName}` : 'Author',
  authorAvatar: articleData?.author?.avatarUrl,
  readTime: articleData?.meta?.readTime || '5 min read',
  imageUrl: articleData?.imageUrl, // For dynamic articles
  imageCaption: articleData?.imageCaption || '', // <-- Get the caption
  imageAlt: articleData?.mainImage?.alt || 'Article image',
  contentBlocks: articleData?.content || [],
};
---

<Layout
  navbarVariant="default"
  includePreFooterCTA={false}
  title={`${displayArticle.title} - Maag`}
  useClientRouter={true}
>
  <main class="bg-base-200 min-h-screen">
    <div class="max-w-[1512px] mx-auto">
      {error && <div class="text-red-500 text-center pt-40">{error}</div>}
      {!error && articleData && (
        <>
          <!-- Article Header Section -->
          <div class="pt-[150px] pb-[100px] flex flex-col items-center gap-[100px]">
            <div class="flex flex-col gap-8 max-w-[825px] w-full">
              <ArticleHeader
                category={displayArticle.category}
                title={displayArticle.title}
              />
              <ArticleAuthor
                name={displayArticle.authorName}
                avatarUrl={displayArticle.authorAvatar}
              />
              <SocialShare readTime={displayArticle.readTime} />
            </div>

            {id !== 'main-article' && displayArticle.imageUrl && (
              <figure class="w-full max-w-[1200px]">
                <img 
                    src={displayArticle.imageUrl} 
                    alt={displayArticle.imageAlt} 
                    class="w-full h-auto rounded-lg shadow-lg"
                    transition:name={`main-article-image-${id}`}
                  />
                {displayArticle.imageCaption && (
                  <figcaption class="text-center text-sm text-gray-500 mt-2">{displayArticle.imageCaption}</figcaption>
                )}
              </figure>
            )}
          </div>

          <!-- Article Content -->
          <div class="max-w-[1400px] mx-auto px-14 pb-[100px]">
            <ArticleBody contentBlocks={displayArticle.contentBlocks} />
            
            {/* Conditionally render EventDetails only if the data exists */}
            {(articleData?.eventDetails) && (
              <EventDetails
                address={articleData.eventDetails.address}
                dates={articleData.eventDetails.dates}
              />
            )}
            
            {/* RecentArticles component removed as per user instruction to remove all static logic */}
          </div>
        </>
      )}
    </div>
  </main>
</Layout>
