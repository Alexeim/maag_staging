---
import DashboardLayout from "@/Layouts/DashboardLayout.astro";
import { articlesApi } from "@/lib/api/api";
import { PUBLIC_API_BASE_URL } from "@/lib/utils/constants";

const normalizeDate = (value: any) => {
  if (!value) {
    return null;
  }
  if (typeof value === "string") {
    const cleaned = value
      .replace(/\u202f/g, " ")
      .replace(/\s+at\s+/i, " ")
      .replace(/UTC([+-]\d{1,2})/, "GMT$1");
    const parsed = new Date(cleaned);
    if (!Number.isNaN(parsed.getTime())) {
      return parsed;
    }
    const fallback = new Date(value);
    return Number.isNaN(fallback.getTime()) ? null : fallback;
  }
  if (typeof value === "number") {
    return new Date(value);
  }
  if (typeof value === "object") {
    if (typeof value.toDate === "function") {
      return value.toDate();
    }
    const seconds =
      "seconds" in value
        ? value.seconds
        : "_seconds" in value
          ? value._seconds
          : null;
    if (seconds !== null) {
      const nanos =
        "nanoseconds" in value
          ? value.nanoseconds
          : "_nanoseconds" in value
            ? value._nanoseconds
            : 0;
      const millis = seconds * 1000 + nanos / 1_000_000;
      return new Date(millis);
    }
  }
  return null;
};

let articlesRaw = [] as Awaited<ReturnType<typeof articlesApi.list>>;
try {
  articlesRaw = await articlesApi.list();
} catch (error) {
  console.error("Failed to load articles", error);
}

const articles = articlesRaw.map((article) => {
  const createdAtDate = normalizeDate(article.createdAt);
  const updatedAtDate = normalizeDate((article as any).updatedAt);
  return {
    ...article,
    createdAtFormatted: createdAtDate
      ? createdAtDate.toLocaleDateString("ru-RU", {
          year: "numeric",
          month: "short",
          day: "numeric",
        })
      : "—",
    updatedAtFormatted: updatedAtDate
      ? updatedAtDate.toLocaleDateString("ru-RU", {
          year: "numeric",
          month: "short",
          day: "numeric",
        })
      : null,
  };
});
---

<DashboardLayout title="Управление статьями" active="articles">
  <div 
    class="bg-base-100 border border-base-300 rounded-xl p-6"
    x-data={`$lazy('articleList', { apiBaseUrl: '${PUBLIC_API_BASE_URL}' })`}
  >
    <div class="flex items-center justify-between mb-6">
      <div>
        <h2 class="text-xl font-semibold">Статьи</h2>
        <p class="text-sm text-base-content/70 mt-1">
          Управляй опубликованными и черновыми материалами.
        </p>
      </div>
    </div>

    {articles.length > 0 ? (
      <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left rtl:text-right text-base-content">
          <thead class="text-xs text-base-content/70 uppercase bg-base-200">
            <tr>
              <th scope="col" class="px-6 py-3">
                Заголовок
              </th>
              <th scope="col" class="px-6 py-3">
                Категория / теги
              </th>
              <th scope="col" class="px-6 py-3 hidden md:table-cell">
                Создана
              </th>
              <th scope="col" class="px-6 py-3">
                <span class="sr-only">Действия</span>
              </th>
            </tr>
          </thead>
          <tbody>
            {articles.map((article, index) => {
              const isLast = index === articles.length - 1;
              const categoryLabel = article.isHotContent
                ? "Самое Читаемое"
                : article.category || "—";
              const tagsLabel = Array.isArray(article.tags)
                ? article.tags.join(", ")
                : "—";
              return (
                <tr
                  class:list={[
                    "bg-base-100 hover:bg-base-200/50",
                    !isLast && "border-b border-base-300",
                  ]}
                >
                  <th scope="row" class="px-6 py-4 font-medium text-base-content whitespace-nowrap">
                    <div class="font-semibold truncate max-w-xs" title={article.title}>{article.title}</div>
                    <div class="text-xs text-base-content/60 mt-1 truncate" title={article.id}>ID: {article.id}</div>
                  </th>
                  <td class="px-6 py-4">
                    <div class="flex flex-col gap-1">
                      <span class="font-semibold">{categoryLabel}</span>
                      <span class="text-xs text-base-content/70">
                        {tagsLabel}
                      </span>
                    </div>
                  </td>
                  <td class="px-6 py-4 hidden md:table-cell">
                    {article.createdAtFormatted}
                  </td>
                  <td class="px-6 py-4 text-right">
                    <div class="flex justify-end gap-4">
                      <a href={`/dashboard/article/${article.id}/edit`} class="font-medium text-primary hover:underline">
                        Редактировать
                      </a>
                      <button
                        type="button"
                        class="font-medium text-error hover:underline"
                        @click={`handleDeleteClick('${article.id}', '${article.title.replace(/'/g, "\\'")}')`}
                      >
                        Удалить
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    ) : (
      <div class="p-8 text-center text-base-content/70">
        <p>Пока нет статей. Создай первую, чтобы начать.</p>
      </div>
    )}
  </div>
</DashboardLayout>
